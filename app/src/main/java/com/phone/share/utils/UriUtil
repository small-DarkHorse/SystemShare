package com.phone.share.utils;

import android.Manifest;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;

import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;

import java.io.File;
import java.lang.ref.WeakReference;

/**
 * @ClassName : UriUtils
 * @Author : WangZhenKai
 * @Date : 2021/1/4
 * @Description : 路径处理
 */
public class UriUtil {

    public static final int REQUEST_CODE_APP_PERMISSION = 2002;

    /**
     * 获取文件的Uri
     *
     * @param mContext 应用上下文
     * @param filePath 文件路径
     * @return
     */
    public static Uri getUriFromFile(Activity mContext, String filePath) {
        Uri uri = null;
        File file = new File(filePath);
        if (!file.exists()) {
            return null;
        }
        if (Build.VERSION.SDK_INT < 24) {
            uri = Uri.fromFile(file);
        } else {
            int permissionWriteResult = ContextCompat.checkSelfPermission(mContext, Manifest.permission.WRITE_EXTERNAL_STORAGE);
            int permissionReadResult = ContextCompat.checkSelfPermission(mContext, Manifest.permission.READ_EXTERNAL_STORAGE);
            if (permissionReadResult == PackageManager.PERMISSION_GRANTED
                    && permissionWriteResult == PackageManager.PERMISSION_GRANTED) {
                uri = FileProvider.getUriForFile(mContext, mContext.getApplicationContext().getPackageName() + ".fileprovider", file);
            } else {
                ActivityCompat.requestPermissions(mContext,
                        new String[]{Manifest.permission.READ_EXTERNAL_STORAGE,
                                Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_CODE_APP_PERMISSION);
            }
        }
        return uri;
    }

    public static <T extends Activity> boolean isActivityFinished(T checkContext) {
        if (null == checkContext) {
            return true;
        }
        return isActivityFinished(new WeakReference<Activity>(checkContext));
    }

    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
    public static <T extends Activity> boolean isActivityFinished(WeakReference<T> checkActivity) {
        if (null == checkActivity || null == checkActivity.get()) {
            return true;
        }
        Activity tempCheckActivity = checkActivity.get();
        if (tempCheckActivity.isDestroyed() || tempCheckActivity.isFinishing()) {
            return true;
        }
        return false;
    }
}
